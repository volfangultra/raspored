// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectNamespace.Data;

#nullable disable

namespace backend_api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ProjectNamespace.Models.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("ProjectNamespace.Models.ClassroomRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequirementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("RequirementId");

                    b.ToTable("ClassroomRequirments");
                });

            modelBuilder.Entity("ProjectNamespace.Models.ClassroomTimeslot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeslotId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("TimeslotId");

                    b.ToTable("ClassroomTimeslots");
                });

            modelBuilder.Entity("ProjectNamespace.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LectureSlotLength")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("ProjectNamespace.Models.CourseRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequirementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("RequirementId");

                    b.ToTable("CourseRequirements");
                });

            modelBuilder.Entity("ProjectNamespace.Models.CourseTimeslot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("CourseTimeslots");
                });

            modelBuilder.Entity("ProjectNamespace.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassroomTimeslotId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProfessorTimeslotId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudyGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomTimeslotId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ProfessorTimeslotId");

                    b.HasIndex("StudyGroupId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("ProjectNamespace.Models.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("ProjectNamespace.Models.ProfessorTimeslot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeslotId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("TimeslotId");

                    b.ToTable("ProfessorTimeslots");
                });

            modelBuilder.Entity("ProjectNamespace.Models.Requirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("ProjectNamespace.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ProjectNamespace.Models.StudyGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cycle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumOfStudents")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StudyGroups");
                });

            modelBuilder.Entity("ProjectNamespace.Models.Timeslot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Timeslots");
                });

            modelBuilder.Entity("ProjectNamespace.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("College")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProjectNamespace.Models.ClassroomRequirement", b =>
                {
                    b.HasOne("ProjectNamespace.Models.Classroom", "Classroom")
                        .WithMany("ClassroomRequirements")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectNamespace.Models.Requirement", "Requirement")
                        .WithMany("ClassroomRequirements")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("ProjectNamespace.Models.ClassroomTimeslot", b =>
                {
                    b.HasOne("ProjectNamespace.Models.Classroom", "Classroom")
                        .WithMany("ClassroomTimeslots")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectNamespace.Models.Timeslot", "Timeslot")
                        .WithMany("ClassroomTimeslots")
                        .HasForeignKey("TimeslotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Timeslot");
                });

            modelBuilder.Entity("ProjectNamespace.Models.Course", b =>
                {
                    b.HasOne("ProjectNamespace.Models.Professor", "Professor")
                        .WithMany("Courses")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("ProjectNamespace.Models.CourseRequirement", b =>
                {
                    b.HasOne("ProjectNamespace.Models.Course", "Course")
                        .WithMany("CourseRequirements")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectNamespace.Models.Requirement", "Requirement")
                        .WithMany("CourseRequirements")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("ProjectNamespace.Models.CourseTimeslot", b =>
                {
                    b.HasOne("ProjectNamespace.Models.Course", "Course")
                        .WithMany("CourseTimeslots")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectNamespace.Models.Timeslot", "Timeslot")
                        .WithMany("CourseTimeslots")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Timeslot");
                });

            modelBuilder.Entity("ProjectNamespace.Models.Lesson", b =>
                {
                    b.HasOne("ProjectNamespace.Models.ClassroomTimeslot", "ClassroomTimeslot")
                        .WithMany("Lessons")
                        .HasForeignKey("ClassroomTimeslotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectNamespace.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectNamespace.Models.ProfessorTimeslot", null)
                        .WithMany("Lessons")
                        .HasForeignKey("ProfessorTimeslotId");

                    b.HasOne("ProjectNamespace.Models.StudyGroup", "StudyGroup")
                        .WithMany("Lessons")
                        .HasForeignKey("StudyGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassroomTimeslot");

                    b.Navigation("Course");

                    b.Navigation("StudyGroup");
                });

            modelBuilder.Entity("ProjectNamespace.Models.ProfessorTimeslot", b =>
                {
                    b.HasOne("ProjectNamespace.Models.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectNamespace.Models.Timeslot", "Timeslot")
                        .WithMany("ProfessorTimeslots")
                        .HasForeignKey("TimeslotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Timeslot");
                });

            modelBuilder.Entity("ProjectNamespace.Models.Classroom", b =>
                {
                    b.Navigation("ClassroomRequirements");

                    b.Navigation("ClassroomTimeslots");
                });

            modelBuilder.Entity("ProjectNamespace.Models.ClassroomTimeslot", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("ProjectNamespace.Models.Course", b =>
                {
                    b.Navigation("CourseRequirements");

                    b.Navigation("CourseTimeslots");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("ProjectNamespace.Models.Professor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("ProjectNamespace.Models.ProfessorTimeslot", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("ProjectNamespace.Models.Requirement", b =>
                {
                    b.Navigation("ClassroomRequirements");

                    b.Navigation("CourseRequirements");
                });

            modelBuilder.Entity("ProjectNamespace.Models.StudyGroup", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("ProjectNamespace.Models.Timeslot", b =>
                {
                    b.Navigation("ClassroomTimeslots");

                    b.Navigation("CourseTimeslots");

                    b.Navigation("ProfessorTimeslots");
                });
#pragma warning restore 612, 618
        }
    }
}
